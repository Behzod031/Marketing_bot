import datetime
import logging
import gspread

from google.oauth2.service_account import Credentials
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


# ========================
# 1. FSM ‚Äî –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# ========================
class UserState(StatesGroup):
    waiting_for_language = State()
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_catalog = State()

class AdminState(StatesGroup):
    waiting_for_photo = State()
    waiting_for_catalog = State()


# ========================
# 2. –†–∞–±–æ—Ç–∞ —Å Google Sheets
# ========================
def get_setting(worksheet, bot_name: str, key: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Google Sheets –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞.
    """
    data = worksheet.get_all_values()
    for row in data:
        if len(row) >= 3 and row[0] == bot_name and row[1] == key:
            return row[2]
    return ""

def set_setting(worksheet, bot_name: str, key: str, value: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Google Sheets.
    """
    data = worksheet.get_all_values()
    for i, row in enumerate(data):
        if len(row) >= 3 and row[0] == bot_name and row[1] == key:
            worksheet.update_cell(i + 1, 3, value)
            return
    worksheet.append_row([bot_name, key, value])


# ========================
# 3. –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
# ========================
def setup_bot_handlers(dp: Dispatcher, bot_config: dict):
    router = Router()

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ADMIN_ID = bot_config["ADMIN_ID"]
    PROJECT_DESCRIPTION = bot_config["PROJECT_DESCRIPTION"]
    LANGUAGES = bot_config["LANGUAGES"]
    bot_name_in_sheet = bot_config.get("BOT_NAME_IN_SHEET", "bot1")

    # Google Sheets
    creds = Credentials.from_service_account_file(
        bot_config["SERVICE_ACCOUNT_FILE"],
        scopes=["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    )
    gc = gspread.authorize(creds)
    sh = gc.open(bot_config["SPREADSHEET_NAME"])
    worksheet_users = sh.worksheet(bot_config["USERS_WORKSHEET"])
    worksheet_settings = sh.worksheet(bot_config["SETTINGS_WORKSHEET"])

    # –°—á–∏—Ç—ã–≤–∞–µ–º photo_id –∏ catalog_id
    FILE_ID = get_setting(worksheet_settings, bot_name_in_sheet, "photo_id")
    CATALOG_FILE_ID = get_setting(worksheet_settings, bot_name_in_sheet, "catalog_id")


    # ==========/start –∫–æ–º–∞–Ω–¥–∞============
    @router.message(Command("start"))
    async def start_handler(message: types.Message, state: FSMContext):
        """
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫.
        """
        await state.set_state(UserState.waiting_for_language)

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        language_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(text="üá∫üáø O'zbekcha"),
                    KeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")
                ]
            ],
            resize_keyboard=True
        )
        # –ú–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ –¥–≤—É—Ö —è–∑—ã–∫–∞—Ö –∏–ª–∏ –æ–¥–Ω–æ –æ–±—â–µ–µ
        text = (
            "Assalomu alaykunüòä:\n\n"
            "üá∫üáø Iltimos, tilni tanlang\n"
            "üá∑üá∫ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
        )
        await message.answer(text, reply_markup=language_keyboard)


    # =============–í—ã–±–æ—Ä —è–∑—ã–∫–∞==============
    @router.message(UserState.waiting_for_language, F.text.in_(["üá∫üáø O'zbekcha", "üá∑üá∫ –†—É—Å—Å–∫–∏–π"]))
    async def language_selection(message: types.Message, state: FSMContext):
        selected_language = message.text
        await state.update_data(language=selected_language)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        await state.set_state(UserState.waiting_for_name)
        await message.answer(
            LANGUAGES[selected_language]["name_prompt"],
            reply_markup=ReplyKeyboardRemove()
        )


    @router.message(UserState.waiting_for_language)
    async def invalid_language(message: types.Message, state: FSMContext):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —è–∑—ã–∫–∞
        """
        text = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.\n"
            "Iltimos, tugmani bosing."
        )
        await message.answer(text)


    # =============–í–≤–æ–¥ –∏–º–µ–Ω–∏==============
    @router.message(UserState.waiting_for_name)
    async def name_handler(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        language = user_data["language"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
        await state.update_data(name=message.text)

        # –ì–æ—Ç–æ–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_keyboard = ReplyKeyboardMarkup(
            keyboard=[[
                KeyboardButton(
                    text=LANGUAGES[language]["contact_button"],
                    request_contact=True
                )
            ]],
            resize_keyboard=True
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.set_state(UserState.waiting_for_phone)
        await message.answer(
            LANGUAGES[language]["contact_prompt"],
            reply_markup=contact_keyboard
        )


    # =============–ö–æ–Ω—Ç–∞–∫—Ç==============
    @router.message(UserState.waiting_for_phone, F.contact)
    async def contact_handler(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        language = user_data["language"]
        name = user_data["name"]
        phone = message.contact.phone_number

        # 1) –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets
        worksheet_users.append_row([
            name,
            phone,
            datetime.datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        ])

        # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å‚Ä¶¬ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        thank_you_text = LANGUAGES[language].get(
            "thank_you_text",
            # fallback ‚Äî –µ—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –Ω–µ—Ç –∫–ª—é—á–∞
            "‚ò∫Ô∏è –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É!\n"
            "üìû –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "ü§© –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∫–∞ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–∫–∞—á–∞—Ç—å –æ–Ω–ª–∞–π–Ω-–∫–∞—Ç–∞–ª–æ–≥."
        )
        await message.answer(thank_you_text)

        # 3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
        photo_id = get_setting(worksheet_settings, bot_name_in_sheet, "photo_id")
        if photo_id:
            # caption –±–µ—Ä—ë–º –∏–∑ PROJECT_DESCRIPTION (–ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É)
            project_text = PROJECT_DESCRIPTION.get(
                language,
                "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ."
            )
            await message.answer_photo(photo_id, caption=project_text)
        else:
            await message.answer(
                "‚ùå –§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /upload_photo –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏."
            )
            await state.clear()
            return

        # 4) –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥
        catalog_keyboard = ReplyKeyboardMarkup(
            keyboard=[[
                KeyboardButton(text=LANGUAGES[language]["get_catalog_button"])
            ]],
            resize_keyboard=True
        )
        await state.set_state(UserState.waiting_for_catalog)
        await message.answer(
            LANGUAGES[language]["get_catalog_prompt"],
            reply_markup=catalog_keyboard
        )


    @router.message(UserState.waiting_for_phone)
    async def handle_no_contact(message: types.Message, state: FSMContext):
        """
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏—Å–ª–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç, –∞ –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –Ω—É–∂–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç.
        """
        user_data = await state.get_data()
        language = user_data.get("language", "üá∑üá∫ –†—É—Å—Å–∫–∏–π")  # fallback ‚Äî —Ä—É—Å—Å–∫–∏–π
        reminder_text = LANGUAGES[language].get("phone_reminder", "–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.")
        await message.answer(reminder_text)


    # =============–ö–∞—Ç–∞–ª–æ–≥==============
    @router.message(UserState.waiting_for_catalog)
    async def send_catalog(message: types.Message, state: FSMContext):
        user_data = await state.get_data()
        language = user_data["language"]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
        if message.text == LANGUAGES[language]["get_catalog_button"]:
            catalog_id = get_setting(worksheet_settings, bot_name_in_sheet, "catalog_id")
            if catalog_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ç–∞–ª–æ–≥
                await message.answer_document(catalog_id)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                catalog_info = LANGUAGES[language].get(
                    "catalog_info",
                    "Ushbu onlayn katalog orqali o‚Äôzingizga mos xonadon rejasini tanlashingiz mumkin."
                )
                await message.answer(catalog_info)
            else:
                await message.answer("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            await state.clear()
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞.")


    # =============–ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´==============

    # 1) –ö–æ–º–∞–Ω–¥–∞ /upload_photo
    @router.message(Command("upload_photo"))
    async def upload_photo_cmd(message: types.Message, state: FSMContext):
        if message.from_user.id == ADMIN_ID:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            await state.set_state(AdminState.waiting_for_photo)
            await message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    @router.message(AdminState.waiting_for_photo, F.photo)
    async def handle_admin_photo(message: types.Message, state: FSMContext):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ (file_id) –≤ Google Sheets, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏ –æ–Ω –∞–¥–º–∏–Ω.
        """
        if message.from_user.id == ADMIN_ID:
            file_id = message.photo[-1].file_id
            set_setting(worksheet_settings, bot_name_in_sheet, "photo_id", file_id)
            await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await state.clear()

    @router.message(AdminState.waiting_for_photo)
    async def handle_not_photo(message: types.Message, state: FSMContext):
        """
        –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ.
        """
        if message.from_user.id == ADMIN_ID:
            await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å **—Ñ–æ—Ç–æ**. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


    # 2) –ö–æ–º–∞–Ω–¥–∞ /upload_catalog
    @router.message(Command("upload_catalog"))
    async def upload_catalog_cmd(message: types.Message, state: FSMContext):
        if message.from_user.id == ADMIN_ID:
            await state.set_state(AdminState.waiting_for_catalog)
            await message.answer("üìÅ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (–∫–∞—Ç–∞–ª–æ–≥) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    @router.message(AdminState.waiting_for_catalog, F.document)
    async def handle_admin_catalog_document(message: types.Message, state: FSMContext):
        if message.from_user.id == ADMIN_ID:
            doc_id = message.document.file_id
            set_setting(worksheet_settings, bot_name_in_sheet, "catalog_id", doc_id)
            await message.answer("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
        else:
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    @router.message(AdminState.waiting_for_catalog)
    async def handle_not_document(message: types.Message, state: FSMContext):
        """
        –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ.
        """
        if message.from_user.id == ADMIN_ID:
            await message.answer("–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å **–¥–æ–∫—É–º–µ–Ω—Ç** (PDF –∏–ª–∏ –¥—Ä—É–≥–æ–µ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
